{
  "__type": "org.pointrel.pointrel20141201.PointrelContentEnvelope",
  "__envelopeVersion": "pointrel20141201-0.0.3",
  "id": "IBIS/ibis.js",
  "contentType": "application/javascript",
  "committer": "tester",
  "timestamp": "2015-02-23T17:14:53.642Z",
  "content": "\"use strict\";\nconsole.log(\"Starting IBIS editor for Twirlip\");\n\nrequire([\n    \"dijit/form/Button\",\n    \"dojo/_base/connect\",\n    \"dijit/layout/ContentPane\",\n    \"dojox/xml/DomParser\",\n    \"dojox/uuid/generateRandomUuid\",\n    \"dojox/gfx\",\n    \"dojo/hash\",\n    \"dojo/_base/lang\",\n    \"dojox/gfx/move\",\n    \"dojox/gfx/Moveable\",\n    \"dojox/xml/parser\",\n    \"js/pointrel20141201Client\",\n    \"dojo/query\",\n    \"dojox/layout/ResizeHandle\",\n    \"dijit/form/SimpleTextarea\",\n    \"dijit/form/TextBox\",\n    \"dojox/widget/Toaster\",\n    \"dijit/Toolbar\",\n    \"dijit/ToolbarSeparator\",\n    \"IBIS/widgetSupport.js\",\n    \"dojo/domReady!\"\n], function(\n    Button,\n    connect,\n    ContentPane,\n    DomParser,\n    generateRandomUuid,\n    gfx,\n    hash,\n    lang,\n    move,\n    Moveable,\n    parser,\n    pointrel20141201Client,\n    query,\n    ResizeHandle,\n    SimpleTextarea,\n    TextBox,\n    Toaster,\n    Toolbar,\n    ToolbarSeparator,\n    widgetSupport\n) {\n        \n    var defaultTextStyle = {family: \"Arial\", size: \"12pt\", weight: \"normal\"};\n    var defaultSurfaceWidthInPixels = 800;\n    var defaultSurfaceHeightInPixels = 600;\n    \n    // Caution: \"this\" may be undefined for functions called by this unless \"bind\" or \"hitch\" is used\n    function forEach(array, theFunction) {\n        if (array === undefined || array === null) {\n            console.log(\"array is undefined or null\", array);\n        }\n        for (var index = 0, length = array.length; index < length; ++index) {\n            theFunction(index, array[index], array);\n        }\n    }\n    \n    function addBreak(contentPane) {\n        contentPane.domNode.appendChild(document.createElement('br'));\n    }\n    \n    function addText(contentPane, text) {\n        contentPane.domNode.appendChild(document.createTextNode(text));\n    }\n    \n    function addHTML(contentPane, htmlText) {\n        var childContentPane = new ContentPane({\n            content: htmlText\n        });\n        \n       childContentPane.placeAt(contentPane);\n       return childContentPane;\n    }\n    \n    function IBISDiagram(contentPane) {\n        this.mainContentPane = contentPane;\n        this.itemToDisplayObjectMap = {};\n        this.changesCount = 0;\n        this.autosave = false;\n        this.lastSelectedItem = null;\n        this.linkingFrom = null;\n        \n        this.diagram = {\n            surfaceWidthInPixels: defaultSurfaceWidthInPixels,\n            surfaceHeightInPixels: defaultSurfaceHeightInPixels,\n            nodes: [],\n            links: []\n        }\n        \n        this.setupMainSurface();\n    }\n    \n    IBISDiagram.prototype.setupMainSurface = function() {\n        var divForResizing = document.createElement(\"div\");\n        this.divForResizing = divForResizing;\n        var divUUID = \"ResizeableCanvasHolder_001\"; //  + generateRandomUuid(); \n        divForResizing.setAttribute(\"id\", divUUID);\n        var style = \"width: \" + this.diagram.surfaceWidthInPixels + \"px; height: \" + this.diagram.surfaceHeightInPixels + \"px;\";\n        style = style + \"border: solid 1px; position: relative\";\n        divForResizing.setAttribute(\"style\", style);\n       \n        this.mainContentPane.domNode.appendChild(divForResizing);\n        \n        this._mainSurface = gfx.createSurface(divForResizing, this.diagram.surfaceWidthInPixels, this.diagram.surfaceHeightInPixels);\n\n        this._mainSurface.whenLoaded(lang.hitch(this, function() {\n            // TODO: Maybe need to disable diagram widget until this callback is called?\n            this.mainSurface = this._mainSurface.createGroup();\n            var isMouseDown = null;\n            this._mainSurface.connect(\"onmousedown\", lang.hitch(this, function (e) {\n                // console.log(\"triggered down\", e);\n                this.selectItem(null);\n                // console.log(\"onmousedown item\", item);\n                isMouseDown = e;\n            }));\n            this._mainSurface.connect(\"onmouseup\", lang.hitch(this, function (e) {\n                isMouseDown = null;\n            }));\n            this._mainSurface.connect(\"onmousemove\", lang.hitch(this, function (e) {\n                if (isMouseDown) {\n                    // console.log(\"mouse move\", e)\n                    this.mainSurface.applyTransform(gfx.matrix.translate(e.clientX - isMouseDown.clientX, e.clientY - isMouseDown.clientY));\n                    isMouseDown = e;\n                }\n            }));\n            this.recreateDisplayObjectsForAllItems();\n        }));\n        \n        var handle = new ResizeHandle({\n            targetId: divUUID,\n            // Need either activeResize true or animateSizing false so that onResize will only be called when totally done resizing\n            // and not with animation still running and node not quite the final size\n            // Updating seems to look worse with activeResize true as canvas still draws old size while rectangle shrinks or grows \n            // activeResize: true,\n            animateSizing: false,\n            // style: \"bottom: 4px; right: 4px;\",\n            onResize: lang.hitch(this, this.updateSizeOfCanvas)\n        }).placeAt(divForResizing);\n        // TODO: Unsure if need this: handle.startup();\n        \n        function handleDragOver(event) {\n            console.log(\"handleDragOver\", event);\n        }\n        // this._mainSurface.addEventListener('dragover', handleDragOver, false);\n    };\n\n    IBISDiagram.prototype.updateSizeOfCanvas = function() {\n        var newWidth = this.divForResizing.clientWidth;\n        var newHeight = this.divForResizing.clientHeight;\n        console.log(\"resize!\", newWidth, newHeight);\n        this._mainSurface.setDimensions(newWidth, newHeight);\n        \n        this.diagram.surfaceWidthInPixels = newWidth;\n        this.diagram.surfaceHeightInPixels = newHeight;\n        this.incrementChangesCount();\n    };\n    \n    IBISDiagram.prototype.clearDisplayObjects = function() {\n        this.itemToDisplayObjectMap = {};\n        this.lastSelectedItem = null;\n        this.linkingFrom = null;\n        \n        this.mainSurface.clear();\n    }\n    \n    IBISDiagram.prototype.recreateDisplayObjectsForAllItems = function() {\n        console.log(\"recreateDisplayObjectsForAllItems\", this.diagram);\n        this.clearDisplayObjects();\n\n        // console.log(\"before forEach this:\", this);\n        var thisObject = this;\n        forEach(this.diagram.nodes, function (index, item) {\n            // console.log(\"looping over: \", item, \"this:\", this);\n            var displayObject = thisObject.addDisplayObjectForItem(item);\n        });\n        forEach(this.diagram.links, function (index, link) {\n            // console.log(\"looping over: \", link, \"this:\", this);\n            var displayObject = thisObject.addDisplayObjectForLink(link);\n        });\n        // console.log(\"done recreateDisplayObjectsForAllItems\");\n    };\n    \n    IBISDiagram.prototype.incrementChangesCount = function() {\n        this.changesCount++;\n        if (this.autosave) {\n            this.saveChanges();\n        }\n    };\n    \n    IBISDiagram.prototype.addItem = function(buttonType, title) {\n        var x = 100;\n        var y = 100;\n        if (this.lastSelectedItem) {\n            x = x + this.lastSelectedItem.x;\n            y = y + this.lastSelectedItem.y;\n        }\n        var item = {uuid: generateRandomUuid(), type: buttonType, x: x, y: y, text: title};\n        this.diagram.nodes.push(item);\n        this.addDisplayObjectForItem(item);\n    }\n    \n    IBISDiagram.prototype.addDisplayObjectForItem = function(item) {\n        var group = this.mainSurface.createGroup();\n        group.item = item;\n        this.itemToDisplayObjectMap[item.uuid] = {group: group, item: item};\n        \n        group.image = group.createImage({x: 0, y: 0, width: 32, height: 32, src: fileNameForItemType(item.type)});\n        group.text = group.createText({text: item.text, x: 36, y: 16, align: \"left\"}).setFont(defaultTextStyle).setFill(\"black\");\n        \n        group.applyTransform(gfx.matrix.translate(item.x, item.y));\n        \n        group.connect(\"onmousedown\", lang.hitch(this, function (e) {\n            // console.log(\"triggered down\", e);\n            this.selectItem(item);\n            // console.log(\"onmousedown item\", item);\n        }));\n        \n        group.on(\"dblclick\", function(e) {\n            console.log(\"dblclick\", e);\n            if (item.type === \"map\" && item.text) {\n                toast(\"Opening diagram:<br>\" + item.text)\n                hash(item.text);\n            } else if (item.type === \"reference\" && item.text) {\n                toast(\"Following link:<br>\" + item.text)\n                window.open(item.text);\n            } else {\n                console.log(\"no action to do\", item);\n            }\n        });\n        \n        var moveable = new Moveable(group);\n        moveable.item = item;\n\n        moveable.onMoveStart = lang.hitch(this, function (mover, shift) {\n            // Kludge for Android as not setting on mouse down\n            // this.updateItemDisplay(item);\n            console.log(\"onMoveStart\", this.linkingFrom, item);\n            if (this.linkingFrom) {\n                // console.log(\"checking link\", this.linkingFrom, item);\n                // Remove link if it exists, or create it if missing\n                var removed = this.removeLink(this.linkingFrom, item);\n                if (!removed) {\n                    this.createLink(this.linkingFrom, item);\n                }\n                this.linkingFrom = null;\n            }\n        });\n        \n        moveable.onMoved = lang.hitch(this, function (mover, shift) {\n            item.x += shift.dx;\n            item.y += shift.dy;\n            this.updateLinkPositions(item);\n        });\n\n        moveable.onMoveStop = lang.hitch(this, function (mover, shift) {\n            this.incrementChangesCount();\n        });\n        \n        this.lastSelectedItem = item;\n    };\n    \n    function calculateArrowHeadPosition(from, to) {\n        var distance = 20;\n        var dx = to.x - from.x;\n        var dy = to.y - from.y;\n        var angleInRadians = Math.atan2(dy, dx);\n        var x = distance * Math.cos(angleInRadians);\n        var y = distance * Math.sin(angleInRadians);\n        var cx = to.x + 16 - x;\n        var cy = to.y + 16 - y;\n        return {cx: cx, cy: cy, r: 2};\n    }\n    \n    IBISDiagram.prototype.createLink = function(from, to) {\n        console.log(\"add link\", from, from.uuid, to, to.uuid);\n        var newLink = {uuid: generateRandomUuid(), from: from.uuid, to: to.uuid};\n        // console.log(\"newLink\", newLink);\n        this.diagram.links.push(newLink);\n        this.addDisplayObjectForLink(newLink);\n    }\n        \n    IBISDiagram.prototype.addDisplayObjectForLink = function(newLink) {\n        var from = this.itemToDisplayObjectMap[newLink.from].item;\n        var to = this.itemToDisplayObjectMap[newLink.to].item;\n        console.log(\"addDisplayObjectForLink\", newLink, from, to);\n        \n        var color = \"blue\";\n        if (from.type === \"pro\") color = \"green\";\n        if (from.type === \"con\") color = \"red\";\n        \n        var line = this.mainSurface.createLine({x1: from.x + 16, y1: from.y + 16, x2: to.x + 16, y2: to.y + 16}).setStroke(color);\n        line.moveToBack();\n        \n        var arrowHeadPosition = calculateArrowHeadPosition(from, to);\n        var arrowhead = this.mainSurface.createCircle(arrowHeadPosition).setStroke(color);\n        \n        this.itemToDisplayObjectMap[newLink.uuid] = {link: newLink, line: line, arrowhead: arrowhead};\n    };\n    \n    IBISDiagram.prototype.removeLink = function(from, to) {\n        var match = -1;\n        var oldLink;\n        forEach(this.diagram.links, function (index, linkItem) {\n            // console.log(\"Comparing against \", linkItem);\n            // console.log(\"from test\", linkItem.from === linkingFrom.uuid);\n            // console.log(\"to test\", linkItem.to === item.uuid, linkItem.to, item.uuid);\n            if (linkItem.from === from.uuid && linkItem.to === to.uuid) {\n                // console.log(\"found existing link\", index);\n                match = index;\n                oldLink = linkItem;\n            }\n        });\n        if (match !== -1) {\n            console.log(\"remove link\", from, to);\n            this.diagram.links.splice(match, 1);\n            this.itemToDisplayObjectMap[oldLink.uuid].line.removeShape();\n            this.itemToDisplayObjectMap[oldLink.uuid].arrowhead.removeShape();\n            return true;\n        }\n        return false;\n    };\n    \n    IBISDiagram.prototype.updateLinkPositions = function(item) {\n        var itemToDisplayObjectMap = this.itemToDisplayObjectMap;\n        forEach(this.diagram.links, function (index, oldLink) {\n            if (oldLink.from === item.uuid) {\n                // console.log(\"found from link that uses item\", index);\n                itemToDisplayObjectMap[oldLink.uuid].line.setShape({x1: item.x + 16, y1: item.y + 16});\n                var to = itemToDisplayObjectMap[oldLink.to].item;\n                var arrowHeadPosition = calculateArrowHeadPosition(item, to);\n                itemToDisplayObjectMap[oldLink.uuid].arrowhead.setShape(arrowHeadPosition);\n            }\n            if (oldLink.to === item.uuid) {\n                // console.log(\"found to link that uses item\", index);\n                itemToDisplayObjectMap[oldLink.uuid].line.setShape({x2: item.x + 16, y2: item.y + 16});\n                var from = itemToDisplayObjectMap[oldLink.from].item;\n                var arrowHeadPosition = calculateArrowHeadPosition(from, item);\n                itemToDisplayObjectMap[oldLink.uuid].arrowhead.setShape(arrowHeadPosition);\n            }\n        });\n    }\n    \n    IBISDiagram.prototype.deleteItem = function(item) {\n        var itemToDisplayObjectMap = this.itemToDisplayObjectMap;\n        // iterate backwards so can safely remove items while iterating\n        for (var i = this.diagram.links.length - 1; i >= 0; i--) {\n            var oldLink = this.diagram.links[i];\n            if (oldLink.from === item.uuid || oldLink.to === item.uuid) {\n                // console.log(\"found to link that uses item\", i);\n                itemToDisplayObjectMap[oldLink.uuid].line.removeShape();\n                itemToDisplayObjectMap[oldLink.uuid].arrowhead.removeShape();\n                this.diagram.links.splice(i, 1);\n            }\n        }\n                \n        var i = ibisDiagram.diagram.nodes.indexOf(item);\n        if (i !== -1) {\n            ibisDiagram.itemToDisplayObjectMap[item.uuid].group.removeShape();\n            ibisDiagram.diagram.nodes.splice(i, 1);\n        }\n        if (ibisDiagram.lastSelectedItem === item) ibisDiagram.lastSelectedItem = null;\n    }\n    \n    IBISDiagram.prototype.selectItem = function(item) {\n        console.log(\"selectItem\", item);\n        if (this.lastSelectedItem) {\n            console.log(\"lastSelected\", this.lastSelectedItem);\n            //var lastSelectedDisplayObject = this.itemToDisplayObjectMap[this.lastSelectedItem.uuid].group;\n            //lastSelectedDisplayObject.circle.setStroke(\n            // {color: lastSelectedDisplayObject.borderColor, width: lastSelectedDisplayObject.borderWidth, cap: \"butt\", join: 4});\n        }\n        if (item) {\n            //var displayObject = this.itemToDisplayObjectMap[item.uuid].group;\n            //displayObject.circle.setStroke({color: displayObject.borderColor, width: displayObject.borderWidth * 2, cap: \"butt\", join: 4});\n        }\n        this.lastSelectedItem = item;\n        //this.updateItemDisplay(item);\n    };\n    \n    IBISDiagram.prototype.loadDiagram = function(diagram) {\n        console.log(\"loadDiagram\", diagram);\n        this.changesCount = 0;\n        this.diagram.nodes = diagram.nodes;\n        this.diagram.links = diagram.links;\n        this.recreateDisplayObjectsForAllItems();\n    };\n    \n    IBISDiagram.prototype.clearDiagram = function() {\n        console.log(\"clearDiagram\", this);\n        this.changesCount = 0;\n        this.diagram.nodes = [];\n        this.diagram.links = [];\n        this.clearDisplayObjects();\n    };\n    \n    function fileNameForItemType(type) {\n        var fileName = type;\n        if (type === \"pro\") fileName = \"plus\";\n        if (type === \"con\") fileName = \"minus\";\n        return \"/IBIS/CompendiumIcons/\" + fileName + \".png\";\n    }\n    \n    // Creating interface\n    var mainContentPane = new ContentPane({\n    });\n    \n    document.body.appendChild(mainContentPane.domNode);\n    mainContentPane.startup();\n    \n    // For a \"toaster\" that can give status or progress updates\n    var toasterPane = addHTML(mainContentPane, '');\n    var toasterWidget = new Toaster({id: \"toasterWidget\"}, toasterPane.domNode);\n    \n    addHTML(mainContentPane, '<b>IBIS diagram editor inspired by Compendium</b>');\n    addBreak(mainContentPane);\n    \n    var fileToolbar = new Toolbar({});\n        \n    addText(fileToolbar, \"Name: \");\n    var idTextBox = new TextBox({\n        name: \"idTextBox\",\n        style: \"width: 300px;\"\n    });\n    idTextBox.placeAt(fileToolbar);\n\n    // File Commands\n    forEach([\n        [\"Load\", loadClicked],\n        [\"Save\", saveClicked],\n        [\"Import\", importClicked]\n    ], function(index, item) {\n        var commandName = item[0];\n        var commandFunction = item[1];\n        if (commandName === \"separator\") {\n            fileToolbar.addChild(new ToolbarSeparator());\n        } else {\n            var commandButton = new Button({\n                label: '<img src=\"/IBIS/CrystalClearIcons/' + commandName + '.png\" alt=\"' + commandName + '\"/>',\n                showLabel: true,\n                iconClass: \"toolbarIcon toolbarIcon-\" + commandName,\n                title: commandName,\n                onClick: lang.partial(commandFunction)\n            });\n            fileToolbar.addChild(commandButton);\n        }\n    });\n    \n    fileToolbar.placeAt(mainContentPane);\n    \n    var entityToolbar = new Toolbar({});\n\n    var objectNames = [\"map\", \"issue\", \"position\", \"decision\", \"pro\", \"con\", \"argument\", \"note\", \"list\", \"reference\"];\n\n    // Entity Objects\n    forEach(objectNames, function(index, item) {\n        var button = new Button({\n            label: '<img src=\"' + fileNameForItemType(item) + '\" alt=\"' + item + '\"/>',\n            showLabel: true,\n            iconClass: \"toolbarIcon toolbarIcon-\" + item,\n            title: item,\n            onClick: lang.partial(entityToolbarButtonClicked, item)\n        });\n        entityToolbar.addChild(button);\n    });\n    \n    entityToolbar.addChild(new ToolbarSeparator());\n    \n    // Entity Commands\n    forEach([\n        [\"LeftArrow\", leftArrowClicked],\n        [\"Edit\", editClicked],\n        [\"Delete\", deleteClicked],\n    ], function(index, item) {\n        var commandName = item[0];\n        var commandFunction = item[1];\n        if (commandName === \"separator\") {\n            entityToolbar.addChild(new ToolbarSeparator());\n        } else {\n            var commandButton = new Button({\n                label: '<img src=\"/IBIS/CrystalClearIcons/' + commandName + '.png\" alt=\"' + commandName + '\"/>',\n                showLabel: true,\n                iconClass: \"toolbarIcon toolbarIcon-\" + commandName,\n                title: commandName,\n                onClick: lang.partial(commandFunction)\n            });\n            entityToolbar.addChild(commandButton);\n        }\n    });\n    \n    entityToolbar.placeAt(mainContentPane);\n    \n    var ibisDiagram = new IBISDiagram(mainContentPane);\n    \n    document.getElementById(\"startup\").style.display = \"none\";\n    \n    var currentDocumentID = null;\n\n    // Load the referenced file, if any\n    var fragment = hash();\n    console.log(\"startup fragment\", fragment);\n    if (fragment) {\n        urlHashFragmentChanged(fragment);\n    }\n    \n    // Update if the URL hash fragment changes\n    connect.subscribe(\"/dojo/hashchange\", urlHashFragmentChanged);\n    \n    function urlHashFragmentChanged(encodedNewHash) {\n        var newHash = decodeURI(encodedNewHash);\n        console.log(\"urlHashFragmentChanged\", encodedNewHash, newHash, currentDocumentID);\n        if (currentDocumentID !== newHash && newHash) {\n            idTextBox.set(\"value\", newHash);\n            loadClicked();\n        } else {\n            console.log('Problem in urlHashFragmentChanged for hash: \"' + newHash + '\"');\n        }\n    }\n    \n    function entityToolbarButtonClicked(buttonType) {\n        console.log(\"entityToolbarButtonClicked\", buttonType);\n        \n        var title = prompt(\"Title for new \" + buttonType + \"?\");\n        if (!title) return;\n        \n        ibisDiagram.addItem(buttonType, title);\n    }\n    \n    function leftArrowClicked() {\n        console.log(\"left arrow clicked\");\n        ibisDiagram.linkingFrom = ibisDiagram.lastSelectedItem;\n    }\n    \n    function editClicked() {\n        console.log(\"edit clicked\");\n        var item = ibisDiagram.lastSelectedItem\n        if (!item) return alert(\"Please select an item first\");\n        var newTitle = prompt(\"New title?\", item.text);\n        if (newTitle) {\n            item.text = newTitle;\n            var text = ibisDiagram.itemToDisplayObjectMap[item.uuid].group.text;\n            text.setShape({text: newTitle});\n        }\n    }\n    \n    function deleteClicked() {\n        console.log(\"delete clicked\");\n        var item = ibisDiagram.lastSelectedItem\n        if (!item) return alert(\"Please select an item first\");\n        // Remove all the links first\n        ibisDiagram.deleteItem(item);\n    }\n    \n    function loadClicked() {\n        console.log(\"load clicked\");\n        var documentID = idTextBox.get(\"value\");\n        if (!documentID) return alert(\"no document ID\");\n        pointrel20141201Client.loadLatestEnvelopeForID(documentID, function(error, envelope) {\n            if (error) {\n                console.log(\"No stored versions could be loaded -- have any versions been saved?\");\n                toast(\"Load failed for:<br>\" + documentID);\n                ibisDiagram.clearDiagram();\n                currentDocumentID = documentID;\n                hash(currentDocumentID);\n                return;\n            }\n            console.log(\"envelope.contents\", envelope.content);\n            if (envelope.contentType !== \"text/IBISDiagram\") {\n                console.log(\"Unexpected content type\", envelope.contentType);\n            } else {\n                ibisDiagram.loadDiagram(envelope.content);\n            }\n            toast(\"Loaded: \" + documentID);\n            currentDocumentID = documentID;\n            hash(currentDocumentID);\n        });\n    }\n    \n    function saveClicked() {\n        console.log(\"save clicked\");\n        var documentID = idTextBox.get(\"value\");\n        if (!documentID) return alert(\"no document ID\");\n        var contentType = \"text/IBISDiagram\";\n        var text = ibisDiagram.diagram; // JSON.stringify(ibisDiagram.diagram, null, 2);\n        var metadata = {id: documentID, contentType: contentType, committer: \"tester\", timestamp: true};        \n        pointrel20141201Client.storeInNewEnvelope(text, metadata, function(error, serverResponse) {\n            if (error) {\n                console.log(\"could not write new version:\\n\" + error);\n                toast(\"Save failed for:<br>\" + documentID);\n                return;\n            }\n            var sha256HashAndLength = serverResponse.sha256AndLength;\n            console.log(\"wrote sha256HashAndLength:\", sha256HashAndLength);\n            toast(\"Saved: \" + documentID);\n            currentDocumentID = documentID;\n            hash(currentDocumentID);hash(currentDocumentID);\n        });\n    }\n    \n    // Using values from Compendium\n    var numberToObjectTypeMap = {\n        \"0\": \"general\",\n        \"1\": \"list\",\n        \"2\": \"map\",\n        \"3\": \"issue\",\n        \"4\": \"position\",\n        \"5\": \"argument\",\n        \"6\": \"pro\",\n        \"7\": \"con\",\n        \"8\": \"decision\",\n        \"9\": \"reference\",\n        \"10\": \"note\",\n        \n        \"11\": \"list_shortcut\",\n        \"12\": \"map_shortcut\",\n        \"13\": \"issue_shortcut\",\n        \"14\": \"position_shortcut\",\n        \"15\": \"argument_shortcut\",\n        \"16\": \"pro_shortcut\",\n        \"17\": \"con_shortcut\",\n        \"18\": \"decision_shortcut\",\n        \"19\": \"reference_shortcut\",\n        \"20\": \"note_shortcut\",\n        \n        \"39\": \"responds_to_link\",\n        \"40\": \"supports_link\",\n        \"41\": \"objects_to_link\",\n        \"42\": \"challenges_link\",\n        \"43\": \"specialized_link\",\n        \"44\": \"expands_on_link\",\n        \"45\": \"related_to_link\",\n        \"46\": \"about_link\",\n        \"47\": \"resolves_link\",\n        \n        \"51\": \"trashbin\",\n        \"52\": \"inbox\"\n    };\n    \n    function importClicked() {\n        console.log(\"import clicked\");\n        var oldText = \"\";\n        widgetSupport.openTextEditorDialog(oldText, \"importDialog\", \"Import\", \"OK\", function(newText, hideDialogFunction) {\n            console.log(\"newText\", newText)\n            hideDialogFunction();\n            \n            // var parsed = DomParser.parse(newText);\n            var parsed = parser.parse(newText);\n            console.log(\"parsed\", parsed);\n            // console.log(\"views\", parsed.byNameNS(\"view\"));\n            var views = query(\"view\", parsed);\n            var nodes = query(\"node\", parsed);\n            var links = query(\"link\", parsed)\n            console.log(\"views\", views);\n            console.log(\"nodes\", nodes);\n            console.log(\"links\", links);\n            // console.log(\"view 0 x\", views[0].getAttribute(\"XPosition\"));\n            \n            var nodeMap = {};\n            \n            var diagram = {\n                nodes: [],\n                links: []\n            }\n            \n            for (var viewIndex = 0; viewIndex < views.length; viewIndex++) {\n                var view = views[viewIndex];\n                console.log(\"view\", viewIndex, view);\n                var noderef = view.getAttribute(\"noderef\");\n                var x = view.getAttribute(\"XPosition\");\n                var y = view.getAttribute(\"YPosition\");\n                // nodeMap[noderef] = {uuid: noderef, x: x, y: y};\n                nodeMap[noderef] = {uuid: noderef, x: parseInt(x), y: parseInt(y)};\n            }\n            \n            for (var nodeIndex = 0; nodeIndex < nodes.length; nodeIndex++) {\n                var node = nodes[nodeIndex];\n                var id = node.getAttribute(\"id\");\n                var label = node.getAttribute(\"label\");\n                // var stateNumber = node.getAttribute(\"state\");\n                var typeNumber = node.getAttribute(\"type\");\n                var type = numberToObjectTypeMap[typeNumber];\n                if (!type) {\n                    console.log(\"problem converting number to object type\", typeNumber, type);\n                }\n                var item = nodeMap[id];\n                if (!item) {\n                    console.log(\"missing view for node with id -- probably overall map object\", id);\n                    item = {uuid: id, x: 32, y: 32};\n                }\n                item.text = label;\n                item.type = type;\n                diagram.nodes.push(item);\n            }\n            \n            for (var linkIndex = 0; linkIndex < links.length; linkIndex++) {\n                var link = links[linkIndex];\n                var id = link.getAttribute(\"id\");\n                var from = link.getAttribute(\"from\");\n                var to = link.getAttribute(\"to\");\n                var label = link.getAttribute(\"label\");\n                var typeNumber = link.getAttribute(\"type\");\n                var type = numberToObjectTypeMap[typeNumber];\n                // var item = diagram.nodes[id];\n                var linkItem = {uuid: id, from: from, to: to, type: type, label: label};\n                diagram.links.push(linkItem);\n            }\n            \n            ibisDiagram.loadDiagram(diagram);\n        });\n    }\n    \n    function toast(message, messageType, duration_ms) {\n        if (!messageType) messageType = \"message\";\n        if (!duration_ms) duration_ms = 2000;\n        toasterWidget.positionDirection = \"tl-down\";\n        toasterWidget.setContent(message, messageType, duration_ms);\n        toasterWidget.show();\n    }\n});"
}