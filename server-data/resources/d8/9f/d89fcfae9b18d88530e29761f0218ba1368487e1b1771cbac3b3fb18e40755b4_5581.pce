{
  "__type": "org.pointrel.pointrel20141201.PointrelContentEnvelope",
  "__envelopeVersion": "pointrel20141201-0.0.3",
  "id": "IBIS/widgetSupport.js",
  "contentType": "application/javascript",
  "committer": "tester",
  "timestamp": "2015-02-23T17:23:06.051Z",
  "content": "\"use strict\";\n\ndefine([\n    \"dojo/_base/array\",\n    \"dojox/mvc/at\",\n    \"dojo/_base/lang\",\n    \"dijit/form/Button\",\n    \"dijit/ConfirmDialog\",\n    \"dijit/layout/ContentPane\",\n    \"dijit/Dialog\",\n    \"dijit/layout/LayoutContainer\",\n    \"dojo/Stateful\",\n    \"dijit/form/Textarea\"\n], function(\n    array,\n    at,\n    lang,\n    Button,\n    ConfirmDialog,\n    ContentPane,\n    Dialog,\n    LayoutContainer,\n    Stateful,\n    Textarea\n){\n    function translate(id) {\n        // No actual translation done for now in this version\n        return id;\n    }\n    \n    // TODO: Translate: Change to taking a translate ID\n    // TODO: Buttons don't show up if window to narrow for dialog\n    function confirm(message, okCallback) {\n        var dialog = new ConfirmDialog({\n            title: \"Confirm\",\n            content: message,\n            style: \"width: 300px\",\n            onExecute: okCallback,\n            // TODO: onCancel: cancelCallback\n        });\n        dialog.show();\n    }\n    \n    /*\n    var dialogConfiguration = {\n        dialogOpenButtonID: \"???\",\n        dialogContentPaneID: \"???\",\n        dialogTitleID: \"???\",\n        dialogStyle: \"height: 500px\",\n        dialogConstructionFunction: ???\n    };\n    */\n    function addButtonThatLaunchesDialog(contentPane, model, id, options, dialogConfiguration) {\n        // if (!callback) callback = lang.partial(domain.buttonClicked, contentPane, model, id, questionOptions);\n        var callback = function() {\n            openDialog(model, id, options, dialogConfiguration);\n        };\n        \n        var button = new Button({\n            label: translate(dialogConfiguration.dialogOpenButtonID),\n            type: \"button\",\n            onClick: callback\n        });\n\n        button.placeAt(contentPane);\n        \n        var wrap = new ContentPane({\n            content: \"<br>\"\n        });\n        wrap.placeAt(contentPane);\n        \n        return button;\n    }\n    \n    function openDialog(model, id, options, dialogConfiguration) {  \n        console.log(\"openDialog model, id, options\", model, id, options, JSON.stringify(dialogConfiguration));\n        \n        var dialog;\n        var dialogContentPane = new ContentPane({id: dialogConfiguration.dialogContentPaneID});\n        \n        function hideDialogMethod(status) {\n            dialog.hide();\n        }\n        \n        dialogConfiguration.dialogConstructionFunction(dialogContentPane, model, id, options, hideDialogMethod, dialogConfiguration);\n   \n        dialog = new Dialog({\n            // TODO: Translate\n            title: translate(dialogConfiguration.dialogTitleID),\n            style: dialogConfiguration.dialogStyle,\n            content: dialogContentPane\n        });\n        \n        // This will free the dialog when we are done with it whether from OK or Cancel to avoid a memory leak\n        dialog.connect(dialog, \"onHide\", function(e) {\n            console.log(\"destroying dialog\");\n            dialog.destroyRecursive(); \n        });\n                \n        dialog.startup(); \n        dialog.show();\n    }\n    \n    // dialogContentPaneID \"textEditorDialog\" dialogTitleID \"title_textEditorDialog\"\n    function openTextEditorDialog(text, dialogContentPaneID, dialogTitleID, dialogOKButtonID, dialogOKCallback) {\n        \n        var model = new Stateful({text: text});\n        \n        var dialogConfiguration = {\n                dialogContentPaneID: dialogContentPaneID,\n                dialogTitleID: dialogTitleID,\n                dialogStyle: \"width: 600px; height: 800px\",\n                dialogConstructionFunction: build_textEditorDialogContent,\n                dialogOKButtonID: dialogOKButtonID,\n                dialogOKCallback: dialogOKCallback\n            };\n        \n        openDialog(model, dialogContentPaneID, {}, dialogConfiguration);\n    }\n    \n    function build_textEditorDialogContent(dialogContentPane, model, id, options, hideDialogMethod, dialogConfiguration) {\n        // Experiment; lots of tries!!! http://jsfiddle.net/u3qcbxy4/37/\n        \n        var layout = new LayoutContainer({\n        });\n        \n        // Maybe SimpleTextarea?\n        var sourceTextarea = new Textarea({\n            name: 'text',\n            value: at(model, \"text\"),\n            placeHolder: dialogConfiguration.placeHolder, // \"[]\",\n            region: 'center',  \n            style: \"overflow: auto; height: 90%; max-height: 90%; width: 98%; max-width: 98%\"\n        });\n        \n        var okButton = new Button({\n            label: translate(dialogConfiguration.dialogOKButtonID),\n            type: \"button\",\n            onClick: function() {dialogConfiguration.dialogOKCallback(model.get(\"text\"), hideDialogMethod, id, options, dialogConfiguration);},\n            region: 'bottom'\n        });\n        \n        layout.addChild(sourceTextarea);\n        layout.addChild(okButton);\n \n        layout.placeAt(dialogContentPane);\n    }\n\n    return {\n        \"confirm\": confirm,\n        \"addButtonThatLaunchesDialog\": addButtonThatLaunchesDialog,\n        \"openDialog\": openDialog,\n        \"openTextEditorDialog\": openTextEditorDialog\n    };\n});"
}