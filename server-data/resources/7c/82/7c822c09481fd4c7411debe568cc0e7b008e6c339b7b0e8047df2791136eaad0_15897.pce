{
  "__type": "org.pointrel.pointrel20141201.PointrelContentEnvelope",
  "__envelopeVersion": "pointrel20141201-0.0.3",
  "id": "js/editor.js",
  "contentType": "application/javascript",
  "committer": "tester",
  "timestamp": "2015-02-23T16:36:17.928Z",
  "content": "\"use strict\";\nconsole.log(\"Starting Twirlip\");\n\nrequire([\n    \"dijit/form/Button\",\n    \"dojo/_base/connect\",\n    \"dijit/layout/ContentPane\",\n    \"dojo/dom\",\n    \"dojo/dom-construct\",\n    \"dojo/hash\",\n    \"js/mimeTypes.js\",\n    \"js/pointrel20141201Client\",\n    \"dijit/form/SimpleTextarea\",\n    \"dijit/form/TextBox\",\n    \"dojox/widget/Toaster\",\n    \"dojox/form/Uploader\",\n    \"dojo/domReady!\"\n], function(\n    Button,\n    connect,\n    ContentPane,\n    dom,\n    domConstruct,\n    hash,\n    mimeTypes,\n    pointrel20141201Client,\n    SimpleTextarea,\n    TextBox,\n    Toaster,\n    Uploader\n) {\n\n    var defaultDocumentID = \"test\";\n    var defaultContentType = \"text/plain\";\n    \n    function addBreak(contentPane) {\n        contentPane.domNode.appendChild(document.createElement('br'));\n    }\n    \n    function addText(contentPane, text) {\n        contentPane.domNode.appendChild(document.createTextNode(text));\n    }\n    \n    function addHTML(contentPane, htmlText) {\n        var childContentPane = new ContentPane({\n            content: htmlText\n        });\n        \n       childContentPane.placeAt(contentPane);\n       return childContentPane;\n    }\n    \n    // Creating interface\n    var mainContentPane = new ContentPane({\n    });\n    \n    document.body.appendChild(mainContentPane.domNode);\n    mainContentPane.startup();\n    \n    // For a \"toaster\" that can give status or progress updates\n    var toasterPane = addHTML(mainContentPane, '');\n    var toasterWidget = new Toaster({id: \"toasterWidget\"}, toasterPane.domNode);\n    \n    addHTML(mainContentPane, '<b>Editor for content</b> -- You can edit the editor source <a href=\"editor#js/editor.js\">here</a><br>');\n    \n    // ID field\n    \n    addText(mainContentPane, 'ID: ');\n    \n    var idTextBox = new TextBox({\n        name: \"idTextBox\",\n        style: \"width: 500px;\"\n    });\n     \n    idTextBox.set(\"value\", defaultDocumentID);\n    \n    idTextBox.placeAt(mainContentPane);\n    \n    addBreak(mainContentPane);\n    \n    // Load and save buttons\n    \n    var loadButton = new Button({\n        label: \"Load\",\n        onClick: loadClicked\n    });\n    \n    loadButton.placeAt(mainContentPane);\n    \n    var saveButton = new Button({\n        label: \"Save\",\n        onClick: saveClicked\n    });\n    \n    saveButton.placeAt(mainContentPane);\n    \n    // Importing\n    \n    var fileUploaderButton = new Uploader({\n        label: \"Import from file, converting binary data as base64-encoded text if needed\"\n    });\n    \n    fileUploaderButton.on('change', handleFileSelect);\n    \n    fileUploaderButton.placeAt(mainContentPane);\n\n    // Open \n\n    var openButton = new Button({\n        label: \"Open link\",\n        onClick: openClicked\n    });\n\n    openButton.placeAt(mainContentPane);\n    \n    addBreak(mainContentPane);\n    \n    // Content type field\n    \n    addText(mainContentPane, 'Content type: ');\n    \n    var contentTypeTextBox = new TextBox({\n        name: \"contentTypeTextBox\",\n        style: \"width: 300px;\"\n    });\n     \n    contentTypeTextBox.set(\"value\", defaultContentType);\n    \n    contentTypeTextBox.placeAt(mainContentPane);\n    \n    addBreak(mainContentPane);\n\n    // Content entry\n    \n    addText(mainContentPane, 'Content: ');\n    addBreak(mainContentPane);\n\n    // Editor\n\n    // Don't specify width so it will expand for full width, but need to specify height or it is not visible\n    // var editorHeight = \"600\";\n    // Subtract out for controls\n    var editorHeight = window.innerHeight - 250;\n    addHTML(mainContentPane, '<div id=\"editor\" style=\"height: ' + editorHeight + 'px;\"></div>');\n\n    var editor = ace.edit(\"editor\");\n    editor.getSession().setUseWorker(false);\n    editor.setTheme(\"ace/theme/Chrome\");\n    editor.getSession().setMode(\"ace/mode/javascript\");\n\n    addBreak(mainContentPane);\n    \n    // Reference loading\n    \n    addHTML(mainContentPane, \"<hr>\");\n    \n    addText(mainContentPane, 'Reference: ');\n    \n    var referenceTextBox = new TextBox({\n        name: \"referenceTextBox\",\n        style: \"width: 500px;\"\n    });\n     \n    referenceTextBox.set(\"value\", \"\");\n    \n    referenceTextBox.placeAt(mainContentPane);\n    \n    addBreak(mainContentPane);\n    \n    var loadFromReferenceButton = new Button({\n        label: \"Load version from reference hash and length\",\n        onClick: loadFromReferenceClicked\n    });\n    \n    loadFromReferenceButton.placeAt(mainContentPane);\n    \n    // List versions\n\n    var listVersionsButton = new Button({\n        label: \"List versions\",\n        onClick: listVersionsClicked\n    });\n    \n    listVersionsButton.placeAt(mainContentPane);\n    \n    // List IDs\n\n    var listAllIDsButton = new Button({\n        label: \"List all saved IDs in new window\",\n        onClick: function() { window.open('list'); }\n    });\n    \n    listAllIDsButton.placeAt(mainContentPane);\n    \n    // Output for versions and IDs\n    \n    addBreak(mainContentPane);\n    \n    var outputContentPane = addHTML(mainContentPane, \"\");\n    \n    var currentDocumentID = null;\n    \n    // Some documents are stored as textual content, whereas some applications store data directly with JSON as part of the envelope.\n    // This variable distinguishes those two cases for editing to preserve the approach used.\n    var currentDocumentIsDirectJSON = false;\n    \n    // Load the referenced file, if any\n    var fragment = hash();\n    console.log(\"startup fragment\", fragment);\n    if (fragment) {\n        urlHashFragmentChanged(fragment);\n    }\n    \n    // Update if the URL hash fragment changes\n    connect.subscribe(\"/dojo/hashchange\", urlHashFragmentChanged);\n    \n    function urlHashFragmentChanged(encodedNewHash) {\n        var newHash = decodeURI(encodedNewHash);\n        console.log(\"urlHashFragmentChanged\", encodedNewHash, newHash, currentDocumentID);\n        if (currentDocumentID !== newHash && newHash) {\n            idTextBox.set(\"value\", newHash);\n            loadClicked();\n        } else {\n            console.log('Problem in urlHashFragmentChanged for hash: \"' + newHash + '\"');\n        }\n    }\n    \n    function saveClicked() {\n        var text = getContent();\n        console.log(\"Save clicked\");\n        var documentID = idTextBox.get(\"value\");\n        if (!documentID) return alert(\"no document ID\");\n        var contentType = contentTypeTextBox.get(\"value\");\n        if (!contentType) return alert(\"no content type\");\n        // Check if document ID was changed manually -- should this field change too?\n        if (documentID !== currentDocumentID) currentDocumentIsDirectJSON = false;\n        var metadata = {id: documentID, contentType: contentType, committer: \"tester\", timestamp: true};\n        var content = text;\n        if (currentDocumentIsDirectJSON) content = JSON.parse(text);\n        pointrel20141201Client.storeInNewEnvelope(content, metadata, function(error, serverResponse) {\n            if (error) {\n                console.log(\"could not write new version:\\n\" + error, documentID);\n                return;\n            }\n            var sha256HashAndLength = serverResponse.sha256AndLength;\n            console.log(\"wrote sha256HashAndLength:\", sha256HashAndLength);\n            referenceTextBox.set(\"value\", sha256HashAndLength);\n            setEditorMode(contentType);\n            currentDocumentID = documentID;\n            hash(currentDocumentID);\n            toast(\"Saved document ID: \" + currentDocumentID);\n        });\n    }\n    \n    function loadClicked() {\n        console.log(\"Load clicked\");\n        var documentID = idTextBox.get(\"value\");\n        if (!documentID) return alert(\"no document ID\");\n        pointrel20141201Client.loadLatestEnvelopeForID(documentID, function(error, envelope) {\n            if (error) {\n                console.log(\"No stored versions could be loaded -- have any versions been saved?\", documentID);\n                toast(\"Load failed for:<br>\" + documentID);\n                setContent(\"\");\n                referenceTextBox.set(\"value\", \"\");\n                currentDocumentID = documentID;\n                hash(currentDocumentID);\n                return;\n            }\n            console.log(\"envelope.contents\", envelope.content);\n            contentTypeTextBox.set(\"value\", envelope.contentType);\n            setEditorMode(envelope.contentType);\n            var content = envelope.content;\n            if (typeof content !== 'string') {\n                console.log(\"Had to convert content to text\");\n                currentDocumentIsDirectJSON = true;\n                // Defer an alert so page can load first\n                //setTimeout(function() {\n                //    alert(\"This content was not stored as a string.\\nChanges will not save correctly.\\nUse the related editing program to change the content.\");\n                //});\n                toast(\"The content is directly stored as JSON\");\n                content = JSON.stringify(content, null, 2);\n            } else {\n                currentDocumentIsDirectJSON = false;\n            }\n            console.log(\"content\", content);\n            setContent(content);\n            referenceTextBox.set(\"value\", envelope.__sha256HashAndLength);\n            // outputContentPane.set(\"content\", \"\");\n            currentDocumentID = documentID;\n            hash(currentDocumentID);\n            toast(\"Loaded document ID: \" + currentDocumentID);\n        });\n    }\n\n    function openClicked() {\n        console.log(\"Open clicked\");\n        var documentID = idTextBox.get(\"value\");\n        window.open(documentID);\n    }\n    \n    function loadFromReferenceClicked() {\n        console.log(\"Load from hash clicked\");\n        var documentReference = referenceTextBox.get(\"value\");\n        if (!documentReference) return alert(\"no document hash\");\n        pointrel20141201Client.fetchEnvelope(documentReference, function(error, envelope) {\n            if (error) {\n                console.log(\"No stored version for reference could be loaded -- have any versions been saved?\", documentReference);\n                toast(\"Load failed for reference:<br>\" + documentReference);\n                return;\n            }\n            console.log(\"envelope.contents\", envelope.content);\n            contentTypeTextBox.set(\"value\", envelope.contentType);\n            setEditorMode(envelope.contentType);\n            var content = envelope.content;\n            if (typeof content !== 'string') {\n                console.log(\"Had to convert content to text\");\n                currentDocumentIsDirectJSON = true;\n                toast(\"The content is directly stored as JSON\");\n                // alert(\"Had to convert content to text, so changes will not save correctly\");\n                content = JSON.stringify(content, null, 2);\n            } else {\n                currentDocumentIsDirectJSON = false;\n            }\n            console.log(\"content\", content);\n            setContent(content);\n            // TODO: What do do about URL hash?\n            toast(\"Loaded resource: \" + documentReference);\n        });\n    }\n    \n    function listVersionsClicked() {\n        console.log(\"List versions clicked\");\n        // Toggle display\n        if (outputContentPane.get(\"content\")) {\n          console.log(\"clearing outputContentPane\")\n          outputContentPane.set(\"content\", \"\");\n          return;\n        }\n        var documentID = idTextBox.get(\"value\");\n        if (!documentID) return alert(\"no document ID\");\n        pointrel20141201Client.queryByID(documentID, function(error, data) {\n            if (error) {\n                console.log(\"No stored versions for item could be loaded -- have any versions been saved?\");\n                return;\n            }\n            console.log(\"data\", data);\n            outputContentPane.set(\"content\", \"All versions for: <b>\" + documentID + \"</b><br><pre>\" + JSON.stringify(data, null, 2) + \"</pre>\");\n        });\n    }\n    \n    // Conversion function from: http://stackoverflow.com/questions/9267899/arraybuffer-to-base64-encoded-string\n    function _arrayBufferToBase64( buffer ) {\n        var binary = '';\n        var bytes = new Uint8Array( buffer );\n        var len = bytes.byteLength;\n        for (var i = 0; i < len; i++) {\n            binary += String.fromCharCode( bytes[ i ] );\n        }\n        return window.btoa( binary );\n    }\n    \n    function startsWith(str, prefix) {\n        return str.indexOf(prefix) === 0;\n    }\n    \n    function isTextContentType(contentType) {\n        if (startsWith(contentType, \"text/\")) return true;\n        if (contentType === \"application/javascript\") return true;\n        return false;\n    }\n    \n    function handleFileSelect() {\n        var files = fileUploaderButton._files;\n        console.log(\"handleFileSelect\", files);\n        \n        if (files.length !== 1) return console.log(\"expected exactly one file for change\");\n        \n        var theFile = files.item(0);\n        console.log(\"file name\", theFile.name, theFile);\n        var contentType = mimeTypes.lookup(theFile.name);\n        var convertToBase64 = !isTextContentType(contentType);\n        var reader = new FileReader();\n        reader.onload = function () {\n            console.log(\"result\", reader.result);\n            var content;\n            if (convertToBase64) {\n                var base64Text = _arrayBufferToBase64(reader.result);\n                content = base64Text;\n                contentType = \"base64::\" + contentType;\n            } else {\n                content = reader.result;\n            }\n            idTextBox.set(\"value\", theFile.name);\n            setContent(content);\n            contentTypeTextBox.set(\"value\", contentType);\n        };\n        console.log(\"about to call read as array buffer\");\n        if (convertToBase64) {\n            reader.readAsArrayBuffer(theFile);\n        } else {\n            reader.readAsText(theFile);\n        }\n    }\n\n    function getContent() {\n        // return contentTextarea.get(\"value\");\n        return editor.getValue();\n    }\n\n    function setContent(newValue) {\n        // contentTextarea.set(\"value\", newValue);\n        editor.setValue(newValue);\n        editor.clearSelection();\n        editor.moveCursorTo(0, 0);\n    }\n    \n    function setEditorMode(contentType) {\n        var mode = \"text\";\n        if (contentType === \"text/javascript\") mode = \"javascript\";\n        if (contentType === \"application/javascript\") mode = \"javascript\";\n        if (contentType === \"text/html\") mode = \"html\";\n        if (contentType === \"text/xml\") mode = \"xml\";\n        if (contentType === \"application/xml\") mode = \"xml\";\n        \n        editor.getSession().setMode(\"ace/mode/\" + mode);\n    }\n    \n    function toast(message, messageType, duration_ms) {\n        if (!messageType) messageType = \"message\";\n        if (!duration_ms) duration_ms = 2000;\n        toasterWidget.positionDirection = \"tl-down\";\n        toasterWidget.setContent(message, messageType, duration_ms);\n        toasterWidget.show();\n    }\n    \n    document.getElementById(\"startup\").style.display = \"none\";\n});"
}